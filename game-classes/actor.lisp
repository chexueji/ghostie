(in-package :ghostie)

(defparameter *actor-directory* "resources/actors")

(defclass actor (game-object)
  ((is-main :accessor actor-is-main :initform nil)
   (vel-avg-x :accessor actor-vel-avg-x :initform 0d0)
   (vel-avg-y :accessor actor-vel-avg-y :initform 0d0)
   (feet :accessor actor-feet :initform nil)))

(defun load-actor-physics-body (actor actor-meta)
  (let ((mass (if (getf actor-meta :mass)
                  (getf actor-meta :mass)
                  50d0))
        (num-circles (if (getf actor-meta :num-circles)
                         (getf actor-meta :num-circles)
                         3))
        (bb (calculate-game-object-bb actor)))
    (let ((body (cpw:make-body (lambda () (cp:body-new mass 1d0))))
          (position (if (getf actor-meta :start-pos)
                        (getf actor-meta :start-pos)
                        '(0 0 0))))
      (let* ((height (- (cadddr bb) (cadr bb)))
             (radius (/ (/ height num-circles) 2d0))
             (moment 0d0))
        (dotimes (i num-circles)
          (let ((x 0d0)
                (y (- (* i (* 2 radius)) (- (/ height 2) radius))))
            (incf moment (cp:moment-for-circle mass radius 0d0 x y))
            (let ((shape (cpw:make-shape :circle body (lambda (body) (cp:circle-shape-new (cpw:base-c body) radius x y)))))
              (when (zerop i) (setf (actor-feet actor) shape))
              (setf (cp-a:shape-u (cpw:base-c shape)) 0.9d0))))
        (let ((body-c (cpw:base-c body)))
          (cp:body-set-moment body-c moment)
          (cp:body-set-pos body-c
                           (coerce (car position) 'double-float)
                           (coerce (cadr position) 'double-float))
          (setf (cp-a:body-v-limit body-c) *character-max-vel*))
        (enqueue (lambda (world)
                   (let ((space (world-physics world)))
                     ;; fix the character's rotation
                     (let ((joint (cpw:make-joint (cpw:space-static-body space) body
                                                  (lambda (body1 body2)
                                                    (cp:damped-rotary-spring-new (cpw:base-c body1) (cpw:base-c body2)
                                                                                 0d0 (* mass 150000d0) (* mass 9999d0))))))
                       (cpw:space-add-joint space joint))
                     ;; add the body/shapes to the world
                     (cpw:space-add-body space body)
                     (dolist (shape (cpw:body-shapes body))
                       (cpw:space-add-shape space shape))))
                 :game)
        body))))

(defun load-actors (actors-meta)
  (let ((actors nil))
    (dolist (actor-info actors-meta)
      (let* ((scale (if (getf actor-info :scale)
                        (getf actor-info :scale)
                        '(1 1 1)))
             (svg-objs (svgp:parse-svg-file (format nil "~a/~a/objects.svg" *actor-directory* (getf actor-info :actor))
                                            :curve-resolution 20
                                            :scale (list (car scale) (- (cadr scale))))))
        (let ((actor (car (svg-to-game-objects svg-objs nil :object-type 'actor :center-objects t))))
          (setf (game-object-physics-body actor) (load-actor-physics-body actor actor-info)
                (actor-is-main actor) (getf actor-info :main))
          (push actor actors))))
    actors))

(defun actor-midair-p (actor)
  (when (and actor (game-object-physics-body actor))
    (let ((feet-shape-c (cpw:base-c (actor-feet actor))))
      (cffi:with-foreign-object (query 'clipmunk:segment-query-info)
        (cp:shape-segment-query feet-shape-c 0d0 0d0 0d0 (1+ (cp-a:circle-shape-r feet-shape-c)) query)
        (dbg :debug "Hit ground: ~s~%" (list (cp-a:segment-query-info-shape query)
                                             (cp-a:segment-query-info-n-x query)
                                             (cp-a:segment-query-info-n-y query)))
        nil))))

(defun actor-stop (actor)
  (when (and actor (game-object-physics-body actor))
    (let ((shape-c (cpw:base-c (caddr (cpw:body-shapes (game-object-physics-body actor))))))
      (setf (cp-a:shape-surface_v-x shape-c) 0d0
            (cp-a:shape-surface_v-y shape-c) 0d0))))

(defun actor-impulse (actor x &key (max-speed-div 1))
  "Move the character on the HORizonal plane."
  (when (and actor (game-object-physics-body actor))
    (let ((body-c (cpw:base-c (game-object-physics-body actor))))
      (let ((vel (cp-a:body-v-x body-c))
            (y (* x 0)))
        (let ((*character-max-run* (if (actor-midair-p actor)
                                       (* *character-max-run* .2)
                                       *character-max-run*)))
          (when (< (abs vel) (/ *character-max-run* max-speed-div))
            (cp:body-apply-impulse body-c
                                   (* x (cp-a:body-m body-c))
                                   (* y (cp-a:body-m body-c))
                                   0d0 0d0)))))))

(defun actor-run (actor x)
  "Move the character on the HORizonal plane."
  (when (and actor (game-object-physics-body actor))
    (let ((body-c (cpw:base-c (game-object-physics-body actor))))
      (let ((vel (cp-a:body-v-x body-c))
            (y (/ (abs x) 3)))
        (let ((*character-max-run* (if (actor-midair-p actor)
                                       (* *character-max-run* .2)
                                       *character-max-run*)))
          (when (< (abs vel) *character-max-run*)
            (cp:body-activate body-c)
            (let ((shape-c (cpw:base-c (actor-feet actor))))
              (setf (cp-a:shape-surface_v-x shape-c) (coerce x 'double-float)
                    (cp-a:shape-surface_v-y shape-c) (coerce y 'double-float)))
            ;  ;(setf (cp-a:shape-u shape-c) (if (zerop x) 0.4d0 0.1d0))
            ;  (cp:body-apply-impulse body-c
            ;                         (* x (cp-a:body-m body-c))
            ;                         (* y (cp-a:body-m body-c))
            ;                         0d0 0d0)
            ))))))

(defun actor-jump (actor)
  "Make the character jump."
  (when (and actor (game-object-physics-body actor))
    (unless (actor-midair-p actor)
      (let ((body-c (cpw:base-c (game-object-physics-body actor))))
        (cp:body-apply-impulse body-c
                               0d0 (* (cp-a:body-m body-c) 300d0)
                               0d0 0d0)))))

(defun update-actor-state (actor)
  (when (and actor (game-object-physics-body actor))
    (let ((alpha 1/100)
          (vel-x (cp-a:body-v-x (cpw:base-c (game-object-physics-body actor))))
          (vel-y (cp-a:body-v-y (cpw:base-c (game-object-physics-body actor)))))
      (setf (actor-vel-avg-x actor) (+ (* alpha vel-x)
                                       (* (- 1d0 alpha) (actor-vel-avg-x actor)))
            (actor-vel-avg-y actor) (+ (* alpha vel-y)
                                       (* (- 1d0 alpha) (actor-vel-avg-y actor)))))))
