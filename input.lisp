(in-package :game-level)

(defun key-handler (key)
  (when (sdl:key= key :sdl-key-minus)
    (decf (nth 2 *world-position*) .2))
  (when (sdl:key= key :sdl-key-equals)
    (incf (nth 2 *world-position*) .2))
  (when (sdl:key= key :sdl-key-up)
    (decf (nth 1 *world-position*) .2))
  (when (sdl:key= key :sdl-key-down)
    (incf (nth 1 *world-position*) .2))
  (when (sdl:key= key :sdl-key-left)
    (incf (nth 0 *world-position*) .2))
  (when (sdl:key= key :sdl-key-right)
    (decf (nth 0 *world-position*) .2))
  (when (sdl:key= key :sdl-key-r)
    (setf *world-position* '(-17.19999 -24.00002 -36.000065)))
  (when (sdl:key= key :sdl-key-c)
    (recompile-shaders))
  (when (sdl:key= key :sdl-key-m)
    (let ((spike (getf *game-data* :spike)))
      (when spike
        (bt:make-thread (lambda ()
                          (loop for d from 0 to 360 do
                                (setf (gl-object-rotation (getf *game-data* :spike)) (list 1 0 0 d))
                                (sleep .02)))))))
  (when (sdl:key= key :sdl-key-t)
    (test-gl-funcs))
  (when (sdl:key= key :sdl-key-l)
    (load-assets))
  (when (sdl:key= key :sdl-key-q)
    (sdl:push-quit-event))
  (when (sdl:key= key :sdl-key-escape)
    (sdl:push-quit-event)))


