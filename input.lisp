(in-package :ghostie)

(defun mouse-pos ()
  (glfw:get-mouse-pos))

(defun mouse-btn (btn-num)
  (eq (glfw:get-mouse-button btn-num) glfw:+press+))

(defmacro key= (key)
  (let ((key (if (characterp key)
                 (char-int key)
                 key)))
    `(eql (glfw:get-key ,key) glfw:+press+)))

(defun key-pressed (key state)
  ;; state == glfw:+release+ || glfw:+press+
  (let ((world *world*)
        (key (code-char key)))
    (when (eq state glfw:+release+)
      (when (eq key #\L)
        (world-render-cleanup world)
        (create-world world)
        (init-render world)
        (enqueue (lambda (game-world)
                   (world-game-cleanup game-world)
                   (create-world game-world)
                   (setup-game game-world))
                 :game))
      (when (eq key #\C)
        (recompile-shaders))
      (when (eq key #\T)
        (test-gl-funcs))
      (when (eq key #\R)
        (let* ((camera (getf (level-meta (world-level world)) :camera))
               (camera (if camera camera '(0 0 -36))))
          (dbg :debug "Camera reset: ~s~%" camera)
          (setf (world-position world) (copy-tree camera))
          (let ((position (copy-tree (world-position world))))
            (enqueue (lambda (game-world)
                       (setf (world-position game-world) position))
                     :game)))))

    (when (eq state glfw:+press+)
      ;(when (eq (char-code key) glfw:+key-left+)
      ;  (enqueue (lambda (game-world)
      ;             (actor-impulse (level-main-actor (world-level game-world)) -200.4 :max-speed-div 2))
      ;           :game))
      ;(when (eq (char-code key) glfw:+key-right+)
      ;  (enqueue (lambda (game-world)
      ;             (actor-impulse (level-main-actor (world-level game-world)) 200.4 :max-speed-div 2))
      ;           :game))
      (when (eq key #\B)
        (enqueue (lambda (game-world)
                   (add-random-bridge game-world))
                 :game))
      (when (or (eq key #\Q)
                (eq (char-code key) glfw:+key-esc+))
        (setf *quit* t)))))

(defun key-handler (world dt)
  (let ((sync-position nil))
    (when (key= #\-)
      (setf sync-position t)
      (decf (nth 2 (world-position world)) (* (coerce dt 'single-float) 100)))
    (when (key= #\=)
      (setf sync-position t)
      (incf (nth 2 (world-position world)) (* (coerce dt 'single-float) 100)))
    (enqueue (lambda (game-world)
               (actor-stop (level-main-actor (world-level game-world))))
             :game)
    (when (key= glfw:+key-left+)
      (enqueue (lambda (game-world)
                 (actor-run (level-main-actor (world-level game-world)) -200.4))
               :game))
    (when (key= glfw:+key-right+)
      (enqueue (lambda (game-world)
                 (actor-run (level-main-actor (world-level game-world)) 200.4))
               :game))
    (when (key= glfw:+key-up+)
      (let ((leftp (key= glfw:+key-left+))
            (rightp (key= glfw:+key-right+)))
        (enqueue (lambda (game-world)
                   (actor-jump (level-main-actor (world-level game-world))
                               :y 320d0
                               :x (cond (leftp -200d0)
                                        (rightp 200d0)
                                        (t 0d0))))
                 :game)))

    (when sync-position
      (let ((position (copy-tree (world-position world))))
        (enqueue (lambda (game-world)
                   (setf (world-position game-world) position))
                 :game))))
  (when (key= #\A)
    (enqueue (lambda (game-world) (add-random-box game-world)) :game)))

(def-c-callback key-pressed-cb :void ((key :int) (state :int))
  (key-pressed key state))


