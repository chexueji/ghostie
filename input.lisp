(in-package :ghostie)

(defun mouse-pos ()
  (glfw:get-mouse-pos))

(defun mouse-btn (btn-num)
  (eq (glfw:get-mouse-button btn-num) glfw:+press+))

(defmacro key= (key)
  (let ((key (if (characterp key)
                 (char-int key)
                 key)))
    `(eql (glfw:get-key ,key) glfw:+press+)))

(defun key-pressed (key state)
  ;; state == glfw:+release+ || glfw:+press+
  (let ((world *world*)
        (key (code-char key)))
    (when (eq state glfw:+release+)
      (when (eq key #\L)
        (world-render-cleanup world)
        (create-world world)
        (init-render world)
        (enqueue (lambda (game-world)
                   (world-game-cleanup game-world)
                   (create-world game-world)
                   (setup-game game-world))
                 :game))
      (when (eq key #\C)
        (recompile-shaders))
      (when (eq key #\T)
        (test-gl-funcs))
      (when (eq key #\R)
        (setf (world-position world) '(0 0 -36))
        (let ((position (copy-tree (world-position world))))
          (enqueue (lambda (game-world)
                     (setf (world-position game-world) position))
                   :game))))

    (when (eq state glfw:+press+)
      (when (eq key #\Q)
        (setf *quit* t)))))

(defun key-handler (world dt)
  (let ((sync-position nil))
    (when (key= #\-)
      (setf sync-position t)
      (decf (nth 2 (world-position world)) (* (coerce dt 'single-float) 10)))
    (when (key= #\=)
      (setf sync-position t)
      (incf (nth 2 (world-position world)) (* (coerce dt 'single-float) 10)))
    (when (key= glfw:+key-up+)
      (setf sync-position t)
      (decf (nth 1 (world-position world)) (* (coerce dt 'single-float) 10)))
    (when (key= glfw:+key-down+)
      (setf sync-position t)
      (incf (nth 1 (world-position world)) (* (coerce dt 'single-float) 10)))
    (when (key= glfw:+key-left+)
      (setf sync-position t)
      (enqueue (lambda (game-world)
                 (move-actor (level-main-actor (world-level game-world)) -.24))
               :game)
      (incf (nth 0 (world-position world)) (* (coerce dt 'single-float) 10)))
    (when (key= glfw:+key-right+)
      (setf sync-position t)
      (enqueue (lambda (game-world)
                 (move-actor (level-main-actor (world-level game-world)) .24))
               :game)
      (decf (nth 0 (world-position world)) (* (coerce dt 'single-float) 10)))

    (when sync-position
      (let ((position (copy-tree (world-position world))))
        (enqueue (lambda (game-world)
                   (setf (world-position game-world) position))
                 :game))))
  (when (key= #\A)
    (enqueue (lambda (game-world) (add-random-box game-world)) :game)))

(def-c-callback key-pressed-cb :void ((key :int) (state :int))
  (key-pressed key state))


