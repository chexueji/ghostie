(in-package :ghostie-demo)

(defun add-poly-to-sym (world verts &key (mass 1d0) body shape (x 0d0) (y 0d0) (angle 0d0) (u 1d0) (e 0d0) (color "#000000"))
  (let* ((space (world-physics world))
         (moment (cpw:moment-for-poly mass verts 0 0))
         (poly-body (if body
                        body
                        (cpw:make-body (lambda () (cp:body-new mass moment)))))
         (poly-shape (if shape
                         shape
                         (cpw:make-shape :poly poly-body (lambda (body) (cpw:shape-poly body verts 0 0))))))
    (setf (cp-a:shape-u (cpw:base-c poly-shape)) (coerce u 'double-float)
          (cp-a:shape-e (cpw:base-c poly-shape)) (coerce e 'double-float))
    (cp:body-set-angle (cpw:base-c poly-body) angle)
    (cp:body-set-pos (cpw:base-c poly-body) x y)
    (let ((gl-objects (list (make-fake-gl-object :data (glu-tessellate:tessellate verts)
                                                 :position '(0 0 0)
                                                 :color (hex-to-rgb color)))))
      (let ((game-object (make-game-object :type 'game-object
                                           :gl-objects gl-objects
                                           :physics poly-body)))
        (cpw:space-add-body space poly-body)
        (cpw:space-add-shape space poly-shape)
        (push game-object (level-objects (world-level world)))
        (sync-game-object-to-physics game-object)
        (let ((render-game-object (make-game-object :type 'game-object
                                                    :position (copy-tree (game-object-position game-object))
                                                    :rotation (copy-tree (game-object-rotation game-object)))))
          (setf (game-object-render-ref game-object) render-game-object)
          (enqueue (lambda (render-world)
                     (dbg :info "Creating game object in render.~%")
                     (let ((gl-objects (loop for fake-gl-object in (game-object-gl-objects game-object)
                                             for gl-object = (make-gl-object-from-fake fake-gl-object)
                                             collect gl-object)))
                       (setf (game-object-gl-objects render-game-object) gl-objects)
                       (push render-game-object (level-objects (world-level render-world)))))
                   :render))
        game-object))))

(defun add-random-box (world)
  (let ((verts #((-10 -10) (-10 10) (10 10) (10 -10)))
        (mass 1.1d0)
        (x (- (random 300d0) 150)))
    (add-poly-to-sym world verts :mass mass :x x :y 30d0 :u 0.4 :e 0d0 :color "#559955")))

#|
(defun add-random-bridge (world)
  (let* ((game-objects nil)
         (num-segments 10)
         (segment-mass 100d0)
         (segment-spacing 10d0)
         (segment-verts (vector `(,(- segment-spacing) -1)
                                `(,(- segment-spacing) 1)
                                `(,segment-spacing 1)
                                `(,segment-spacing -1)))
         (x (- (random 300d0) 150))
         (y -300d0))
    (dotimes (i num-segments)
      (let ((x (+ x (* (* 2 segment-spacing) i))))
        (push (add-poly-to-sym world segment-verts :mass segment-mass :x x :y y :color "#885555") game-objects)))
    (let ((bodies (coerce (append (list (cpw:space-static-body (world-physics world)))
                                  (loop for obj in (reverse game-objects) collect (game-object-physics-body obj)))
                          'vector)))
      (dotimes (i (1- (length bodies)))
        (let ((body1 (aref bodies i))
              (body2 (aref bodies (1+ i))))
          (let ((a1x (* segment-spacing 1.0d0))
                (a1y 0d0)
                (a2x (* segment-spacing -1.0d0))
                (a2y 0d0))
            (when (cpw:body-static-p body1)
              (setf a1x x
                    a1y y))
            (let ((joint (cpw:make-joint body1 body2 (lambda (body1 body2)
                                                       (cp:pivot-joint-new-2 (cpw:base-c body1)
                                                                             (cpw:base-c body2)
                                                                             a1x a1y a2x a2y)))))
              (cpw:space-add-joint (world-physics world) joint))))))
    game-objects))
|#

