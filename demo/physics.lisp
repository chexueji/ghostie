(in-package :ghostie-demo)

(defun add-box (world &key (x (- (random 300d0) 150)) (y 30d0))
  (let* ((box-meta `(:type "box" :start-position (,x ,y) :scale (.6 .6 .6)))
         (object (create-object box-meta)))
    (add-level-object (world-level world) object)))

#|
(defun add-random-bridge (world)
  (let* ((base-objects nil)
         (num-segments 10)
         (segment-mass 100d0)
         (segment-spacing 10d0)
         (segment-verts (vector `(,(- segment-spacing) -1)
                                `(,(- segment-spacing) 1)
                                `(,segment-spacing 1)
                                `(,segment-spacing -1)))
         (x (- (random 300d0) 150))
         (y -300d0))
    (dotimes (i num-segments)
      (let ((x (+ x (* (* 2 segment-spacing) i))))
        (push (add-poly-to-sym world segment-verts :mass segment-mass :x x :y y :color "#885555") base-objects)))
    (let ((bodies (coerce (append (list (cpw:space-static-body (world-physics world)))
                                  (loop for obj in (reverse base-objects) collect (object-physics-body obj)))
                          'vector)))
      (dotimes (i (1- (length bodies)))
        (let ((body1 (aref bodies i))
              (body2 (aref bodies (1+ i))))
          (let ((a1x (* segment-spacing 1.0d0))
                (a1y 0d0)
                (a2x (* segment-spacing -1.0d0))
                (a2y 0d0))
            (when (cpw:body-static-p body1)
              (setf a1x x
                    a1y y))
            (let ((joint (cpw:make-joint body1 body2 (lambda (body1 body2)
                                                       (cp:pivot-joint-new-2 (cpw:base-c body1)
                                                                             (cpw:base-c body2)
                                                                             a1x a1y a2x a2y)))))
              (cpw:space-add-joint (world-physics world) joint))))))
    base-objects))
|#

