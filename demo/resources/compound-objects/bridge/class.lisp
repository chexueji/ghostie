(in-package :ghostie-demo)

(defobject bridge (compound-object) ())

(defmethod init-compound-object ((bridge bridge))
  (let* ((meta (compound-object-meta bridge))
         (anchor1 (getf meta :anchor1))
         (anchor2 (getf meta :anchor2))
         (num-pieces (getf meta :num-pieces))
         (x-diff (/ (- (car anchor2) (car anchor1)) num-pieces))
         (y-diff (/ (- (cadr anchor2) (cadr anchor1)) num-pieces))
         (x-diff (coerce x-diff 'double-float))
         (y-diff (coerce y-diff 'double-float))
         (x-diff/2 (/ x-diff 2.1))
         (y-diff/2 (/ y-diff 2.1))
         (piece-scale (getf meta :piece-scale))
         (static-body (cpw:space-static-body (world-physics (game-game-world *game*)))))
    (dotimes (i num-pieces)
      (let* ((x (+ (car anchor1) (* i x-diff)))
             (y (+ (cadr anchor2) (* i y-diff)))
             (piece-meta `(:type "bridge-piece"
                           :start-position (,x ,y)
                           :scale ,piece-scale))
             (piece (create-object piece-meta))
             (last-piece (car (compound-object-pieces bridge))))
        (format t "coords: ~s~%" (list x y (calculate-object-bb piece)))
        (push piece (compound-object-pieces bridge))
        (if last-piece
            (let* ((a1x x-diff/2)
                   (a1y y-diff/2)
                   (a2x (- x-diff/2))
                   (a2y (- y-diff/2))
                   (joint (cpw:make-joint (object-physics-body last-piece)
                                          (object-physics-body piece)
                                          (lambda (body1 body2)
                                            (cp:pivot-joint-new-2 (cpw:base-c body1)
                                                                  (cpw:base-c body2)
                                                                  a1x a1y a2x a2y)))))
              (push joint (compound-object-joints bridge))
              (when (= i (1- num-pieces))
                (let* ((a1x x-diff/2)
                       (a1y y-diff/2)
                       (a2x (coerce (- (car anchor2) x-diff/2) 'double-float))
                       (a2y (coerce (- (cadr anchor2) y-diff/2) 'double-float))
                       (joint (cpw:make-joint (object-physics-body piece)
                                              static-body
                                              (lambda (body1 body2)
                                                (cp:pivot-joint-new-2 (cpw:base-c body1)
                                                                      (cpw:base-c body2)
                                                                      a1x a1y a2x a2y)))))
                  (push joint (compound-object-joints bridge)))))
            (let* ((a1x (coerce (car anchor1) 'double-float))
                   (a1y (coerce (cadr anchor1) 'double-float))
                   (a2x (- x-diff/2))
                   (a2y (- y-diff/2))
                   (joint (cpw:make-joint static-body
                                          (object-physics-body piece)
                                          (lambda (body1 body2)
                                            (cp:pivot-joint-new-2 (cpw:base-c body1)
                                                                  (cpw:base-c body2)
                                                                  a1x a1y a2x a2y)))))
              (push joint (compound-object-joints bridge))))))
    (in-game (world)
      (let ((level (world-level world)))
        (dolist (obj (compound-object-pieces bridge))
          (add-level-object level obj))
        (dolist (joint (compound-object-joints bridge))
          (cpw:space-add-joint (world-physics world) joint))))))

(defun test-bridge ()
  (let* ((meta `(:anchor1 (866 -360)
                 :anchor2 (1200 -360)
                 :num-pieces 7
                 :piece-scale (.8 .6 1)))
         (bridge (make-instance 'bridge :meta meta)))
    (init-compound-object bridge)))

