(in-package :ghostie-demo)

(defun input-key-handler (game render-world dt main-actor)
  (let ((sync-position nil)
        (game-world (game-game-world game)))
    (when (key= #\-)
      (setf sync-position t)
      (decf (nth 2 (world-position world)) (* (coerce dt 'single-float) 100)))
    (when (key= #\=)
      (setf sync-position t)
      (incf (nth 2 (world-position world)) (* (coerce dt 'single-float) 100)))
    (in-game ()
      (pill-stop main-actor))
    (when (key= glfw:+key-left+)
      (in-game ()
        (pill-run main-actor -200.4)))
    (when (key= glfw:+key-right+)
      (in-game ()
        (pill-run main-actor 200.4)))
    (when (key= glfw:+key-up+)
      (let ((leftp (key= glfw:+key-left+))
            (rightp (key= glfw:+key-right+)))
        (in-game ()
          (pill-jump main-actor
                     :y 320d0
                     :x (cond (leftp -200d0)
                              (rightp 200d0)
                              (t 0d0))))))
    (when sync-position
      (let ((position (copy-tree (world-position render-world))))
        (setf (world-position game-world) position)))
    (when (key= #\A)
      (let ((x (car (game-object-position main-actor))))
        (in-game (game-world)
          (add-random-box game-world :x x))))))

(defun input-key-press (game key)
  (when (or (eq (code-char key) #\Q)
            (eq key glfw:+key-esc+))
    (stop-game game)))

(defun input-key-release (game key)
  (let ((render-world (game-render-world game)))
    (case (code-char key)
      (#\L
       (ghostie::world-render-cleanup render-world)
       (ghostie::create-world render-world)
       (ghostie::init-render render-world)
       (in-game (game-world)
         (ghostie::world-game-cleanup game-world)
         (ghostie::create-world game-world)
         (ghostie::world-load-level game-world "trees")))
      (#\C
       (recompile-shaders))
      (#\T
       (ghostie::test-gl-funcs))
      (#\R
       (let* ((camera (getf (level-meta (world-level render-world)) :camera))
              (camera (if camera camera '(0 0 -36))))
         (dbg :debug "(input) Camera reset: ~s~%" camera)
         (setf (world-position render-world) (copy-tree camera))
         (let ((position (copy-tree (world-position render-world))))
           (in-game (game-world)
             (setf (world-position game-world) position))))))))

